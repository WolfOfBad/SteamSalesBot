/*
 * This file is generated by jOOQ.
 */
package ru.wolfofbad.links.domain.jooq.generated.tables


import java.util.function.Function

import javax.annotation.processing.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row1
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import ru.wolfofbad.links.domain.jooq.generated.DefaultSchema
import ru.wolfofbad.links.domain.jooq.generated.keys.CONSTRAINT_1
import ru.wolfofbad.links.domain.jooq.generated.tables.records.ChatRecord


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.18.13"
    ],
    comments = "This class is generated by jOOQ"
)
@Suppress("UNCHECKED_CAST")
open class Chat(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ChatRecord>?,
    aliased: Table<ChatRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ChatRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>CHAT</code>
         */
        val CHAT: Chat = Chat()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ChatRecord> = ChatRecord::class.java

    /**
     * The column <code>CHAT.ID</code>.
     */
    val ID: TableField<ChatRecord, Long?> = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<ChatRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ChatRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>CHAT</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>CHAT</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>CHAT</code> table reference
     */
    constructor(): this(DSL.name("CHAT"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ChatRecord>): this(Internal.createPathAlias(child, key), child, key, CHAT, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getPrimaryKey(): UniqueKey<ChatRecord> = CONSTRAINT_1
    override fun `as`(alias: String): Chat = Chat(DSL.name(alias), this)
    override fun `as`(alias: Name): Chat = Chat(alias, this)
    override fun `as`(alias: Table<*>): Chat = Chat(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Chat = Chat(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Chat = Chat(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Chat = Chat(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row1<Long?> = super.fieldsRow() as Row1<Long?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
